function GETDENSITY {
	parameter altitude.
	set LOWDENS TO 0.
	set HIGHDENS TO 0.
	SET MIX TO 1.
	if (altitude < 2500)
	{
		SET LOWDENS TO 1.225.
		SET HIGHDENS TO 0.898.
		SET MIX TO altitude/2500.
	} else if (altitude < 5000)
	{
		SET LOWDENS TO 0.898.
		SET HIGHDENS TO  0.642 .
		SET MIX TO (altitude-2500)/2500.
	} else if (altitude < 7500)
	{
		SET LOWDENS TO  0.642 .
		SET HIGHDENS TO 0.446.
		SET MIX TO (altitude-5000)/2500.
	} else if (altitude < 10000)
	{
		SET LOWDENS TO 0.446.
		SET HIGHDENS TO 0.288.
		SET MIX TO (altitude-7500)/2500.
	} else if (altitude < 15000)
	{
		SET LOWDENS TO 0.288.
		SET HIGHDENS TO 0.108 .
		SET MIX TO (altitude-10000)/5000.
	} else if (altitude < 20000)
	{
		SET LOWDENS TO 0.108.
		SET HIGHDENS TO 0.040 .
		SET MIX TO (altitude-15000)/5000.
	} else if (altitude < 25000)
	{
		SET LOWDENS TO 0.040 .
		SET HIGHDENS TO  	0.015 .
		SET MIX TO (altitude-20000)/5000.
	} else if (altitude < 30000)
	{
		SET LOWDENS TO  	0.015 .
		SET HIGHDENS TO 0.006 .
		SET MIX TO (altitude-25000)/5000.
	} else if (altitude < 40000)
	{
		SET LOWDENS TO 0.006 .
		SET HIGHDENS TO 0.001.
		SET MIX TO (altitude-30000)/10000.
	} else if (altitude < 70000)
	{
		SET LOWDENS TO 0.001.
		SET HIGHDENS TO 0.0001.
		SET MIX TO (altitude-40000)/30000.
	} else
	{
		RETURN 0.
	}
	RETURN (LOWDENS*(1-MIX))+(HIGHDENS*(MIX)).
}.

function GETGATALT {
	parameter ALTITUDETOCHECK.
	return body:mu / (ALTITUDETOCHECK + body:radius)^2.
}.

function GETBALLISTICX {
	parameter STARTINGALT.
	parameter Uo.
	parameter Vo.
	parameter Cd.
	
	SET g to GETGATALT(STARTINGALT).
	SET Vt TO SQRT((2*SHIP:MASS*g)/(Cd*Density)).
	SET ESTFALLTIME TO (Vo/g)*2.
	SET ymax TO (Vt^2 / (2 * g)) * ln ((Vo^2 + Vt^2)/Vt^2).
	SET ITERATIONS TO 5.
	UNTIL (ITERATIONS = 0)
	{

		SET NEWG TO GETGATALT(STARTINGALT+ymax).
		SET Vt TO SQRT((2*SHIP:MASS*NEWG)/(Cd*GETDENSITY((STARTINGALT+ymax)/2))).
		SET ymax TO (Vt^2 / (2 * NEWG)) * ln ((Vo^2 + Vt^2)/Vt^2).
		SET AVGG TO (g+NEWG)/2.
		SET FALLTIMENEW TO (Vo/AVGG)*2.
		
		SET X TO ((Vt*Vt)/AVGG)*(LN(((Vt*Vt)+AVGG*UoHMS*FALLTIMENEW)/(Vt*Vt))).
		
		SET ITERATIONS TO ITERATIONS - 1.
	}.
	RETURN X.
}

function GETAEROFORCE {
	parameter ALTITUDETOCHECK.
	parameter VEL.
	parameter CD.
	SET Q TO (GETDENSITY(ALTITUDETOCHECK) * 0.5 * VEL * VEL).
	RETURN Q * CD.
}.

function GETITERATEBALLX {
	// Iterative method.
	parameter STARTINGALT.
	parameter ENDALT.
	parameter Uo.
	parameter Vo.
	parameter Cd.
	SET DT to 1.
	SET ITERATIONS TO 1000.
	SET CURRENTALT TO STARTINGALT.
	SET CURRENTHORV TO Uo.
	SET CURRENTVERV TO Vo.
	SET DISTANCEX TO 0.
	PRINT "CURRENTALT: " + CURRENTALT.
	PRINT "CURRENTHORV: " + CURRENTHORV.
	PRINT "CURRENTVERV: " + CURRENTVERV.
	PRINT "DISTANCEX: " + DISTANCEX.
	PRINT "ITERATION: " + ITERATIONS.
	UNTIL (ITERATIONS = 0)
	{
		SET AERODYNAMICFORCEHOR TO GETAEROFORCE(CURRENTALT, CURRENTHORV, Cd).
		SET AERODYNAMICFORCEVER TO GETAEROFORCE(CURRENTALT, CURRENTVERV, Cd).
		PRINT "AEROHOR: " + AERODYNAMICFORCEHOR.
		PRINT "AEROVER: " + AERODYNAMICFORCEVER.
		// TODO: DO RK4 integration instead.
		SET NEWHORV TO CURRENTHORV - (AERODYNAMICFORCEHOR / SHIP:MASS).
		SET NEWVERV TO 0.
		IF (CURRENTVERV > 0)
		{
			SET NEWVERV TO CURRENTVERV - (AERODYNAMICFORCEVER / SHIP:MASS).
		} ELSE {
			// I guess if falling the vertical drag is applied upwards.
			SET NEWVERV TO CURRENTVERV + (AERODYNAMICFORCEVER / SHIP:MASS).
		}
		// Apply G.
		//SET NEWVERV TO NEWVERV - GETGATALT(CURRENTALT).

		// Prepare for next iteration.
		SET CURRENTHORV TO NEWHORV.
		SET CURRENTVERV TO NEWVERV.
		SET CURRENTALT TO CURRENTALT + CURRENTVERV.
		SET DISTANCEX TO DISTANCEX + CURRENTHORV.
		PRINT "CURRENTALT: " + CURRENTALT.
		PRINT "CURRENTHORV: " + CURRENTHORV.
		PRINT "CURRENTVERV: " + CURRENTVERV.
		PRINT "DISTANCEX: " + DISTANCEX.
		PRINT "ITERATION: " + ITERATIONS.
		IF (CURRENTALT < ENDALT) 
		{
			// End iterations.
			SET ITERATIONS TO 0.
		} ELSE {
			// Continue iterations.
			SET ITERATIONS TO ITERATIONS - 1.
		}
	}.

}.

function PRINTDATA {
	SET Cd TO 0.007.
	LOCK CALCHORV TO COS((ARCSIN(SHIP:VERTICALSPEED/SHIP:AIRSPEED)))*SHIP:AIRSPEED.
	PRINT "CURRENT X:" + GETBALLISTICX(ALTITUDE, SHIP:VERTICALSPEED, CALCHORV, Cd) at (20,0).
}




CLEARSCREEN.
PRINT "*** BALLISTIC BURN TEST ***" AT (0,0).
STAGE.
SET Cd TO 0.0003.
SET Vo TO 250.
SET Uo TO 20.
SET TRAJECTORYANGLE TO (ARCTAN(Vo/Uo)).//* constant:RadToDeg.
PRINT "TRAJECTORYANGLE: " + TRAJECTORYANGLE.
SET Density TO 1.225.
//lock g to constant:g * body:mass / body:radius^2.		// Gravity (m/s^2)	
lock g to GETGATALT(altitude).
SET Vt TO SQRT((2*SHIP:MASS*g)/(Cd*Density)).
SET FALLTIMEHMS TO (Vo/g)*2.
SET UoHMS TO Uo.
LOCK CALCHORV TO COS((ARCSIN(SHIP:VERTICALSPEED/SHIP:AIRSPEED)))*SHIP:AIRSPEED.
SET ymax TO (Vt^2 / (2 * g)) * ln ((Vo^2 + Vt^2)/Vt^2).
SET NEWG TO body:mu / (ymax + body:radius)^2.
SET Vt TO SQRT((2*SHIP:MASS*NEWG)/(Cd*GETDENSITY((ALTITUDE+ymax)/2))).
SET ymax TO (Vt^2 / (2 * NEWG)) * ln ((Vo^2 + Vt^2)/Vt^2).
SET AVGG TO (g+NEWG)/2.
SET FALLTIMENEW TO (Vo/AVGG)*2.
PRINT "YMAX: " + Ymax AT (0,9).
PRINT "EST FALLTIME: " + FALLTIMENEW AT (0,1).
SET X TO ((Vt*Vt)/AVGG)*(LN(((Vt*Vt)+AVGG*UoHMS*FALLTIMENEW)/(Vt*Vt))).
PRINT "Calculated X: " + X AT (0,3).
LOCK STEERING TO HEADING(90,90).
LOCK THROTTLE TO 1.0.
SET DELTATIME TO 0.1.
SET LASTTIME TO TIME:SECONDS.
SET VVACC TO 1.
SET LASTVV TO 0.
SET SUMCD TO 0.
SET SUMCDI TO 0.

UNTIL (SHIP:VERTICALSPEED > Vo*0.5)
{
PRINTDATA().
// Measure Cd...
	WAIT 0.01.
	SET DELTATIME TO TIME:SECONDS - LASTTIME.
	SET LASTTIME TO TIME:SECONDS.
	SET VVACC TO (SHIP:VERTICALSPEED - LASTVV)/DELTATIME.
	SET LASTVV TO SHIP:VERTICALSPEED.
	IF (SHIP:VERTICALSPEED > 0.1)
	{
		PRINT "VVACC: " + VVACC AT (0,23).
		GEAR OFF.
		
	}.
	SET ENGINEPUSH TO ((SHIP:MAXTHRUST*1000)/(SHIP:MASS*1000)) - g.
	PRINT "ENGINEPUSH: " + ENGINEPUSH AT (0,24).
	
	SET REMAININGACC TO VVACC - ENGINEPUSH.
	//SET REMAININGACC TO REMAININGACC - g.
	
	PRINT "REMAINING ACC: " + REMAININGACC AT (0,18).
	SET AEROFORCE TO REMAININGACC*(SHIP:MASS*1000).
	PRINT "AEROFORCE: " + AEROFORCE AT (0,19).
	SET CALCQ TO (GETDENSITY(ALTITUDE) * 0.5 * SHIP:AIRSPEED * SHIP:AIRSPEED).
	PRINT "CALC QV: " + CALCQ AT (0,22).
	PRINT "Cd: " + AEROFORCE/CALCQ AT (0,20).
	PRINT "Cd: " + AEROFORCE/SHIP:Q AT (0,21).
	IF (SHIP:VERTICALSPEED > 10.0)
	{
		SET SUMCD TO (SUMCD - (AEROFORCE/CALCQ)).
		SET SUMCDI TO (SUMCDI + 1).
		PRINT "Sumcd: " + SUMCD AT (0,25).
		print "Sumcdi: " + SUMCDI AT (0,26).
		PRINT "Av Cd: " + (SUMCD/SUMCDI) AT (0,27).
	}
}.
//SET Cd TO (SUMCD/SUMCDI).
PRINT "Av Cd: " + (SUMCD/SUMCDI) AT (0,22).
UNTIL CALCHORV > Uo {
	PRINTDATA().
	LOCK THROTTLE TO 1.0.
	IF (APOAPSIS > 500)
	{
		LOCK STEERING TO HEADING(90,TRAJECTORYANGLE).
	}
	SET TRAJECTORYANGLE TO (ARCTAN(CALCHORV/SHIP:VERTICALSPEED)).
	PRINT "G: " + g AT (0,30).
	PRINT "EST DENSITY: " + GETDENSITY(ALTITUDE) AT (0,31).
	PRINT "CALC Q: " + (GETDENSITY(ALTITUDE) * 0.5 * SHIP:AIRSPEED * SHIP:AIRSPEED) AT (0,32).
	PRINT "GIVEN Qkpa: " + (SHIP:Q*constant:AtmToKpa) AT (0,33).
	PRINT "GIVEN Q: " + (SHIP:Q * 101325) AT (0,17).
	SET CALCDENS TO ((SHIP:Q*101325)/(0.5*SHIP:AIRSPEED*SHIP:AIRSPEED)).
	PRINT "CALC DENS: " + CALCDENS AT (0,34).
	SET CALCDENS2 TO ((SHIP:Q)/(0.5*SHIP:AIRSPEED*SHIP:AIRSPEED)).
	PRINT "CALC DENS2: " + CALCDENS2 AT (0,15).
	SET CALCDENS3 TO (((GETDENSITY(ALTITUDE) * 0.5 * SHIP:AIRSPEED * SHIP:AIRSPEED))/(0.5*SHIP:AIRSPEED*SHIP:AIRSPEED)).
	PRINT "CALC DENS3: " + CALCDENS3 AT (0,16).
	PRINT "AIRSPEED: " + SHIP:AIRSPEED AT (0,37).
	
	
	
	RCS ON.
}
LOCK THROTTLE TO 0.
LOCK STEERING TO PROGRADE.
wait 1.
PRINT "ACTAUL Uo: " + CALCHORV AT (0,13).
PRINT "ACTUAL Vo: " + SHIP:VERTICALSPEED AT (0,14).
SET NEWDENSITY TO Density.
//(0.898+0.642)/2.
SET NEWVt TO SQRT((2*SHIP:MASS*g)/(Cd*GETDENSITY((ALTITUDE+(ALTITUDE+ymax))/2))).
SET FALLTIMENEW TO ((SHIP:VERTICALSPEED)/g)*2.
SET XNEW TO ((NEWVt*NEWVt)/g)*(LN(((NEWVt*NEWVt)+g*CALCHORV*FALLTIMENEW)/(NEWVt*NEWVt))).
SET XNEW TO GETBALLISTICX(ALTITUDE,CALCHORV, SHIP:VERTICALSPEED, Cd).
//PRINT "NEW ESTIMATE: " + XNEW AT (0,4).
PRINT "NEW FALLTIME: " + FALLTIMENEW AT (0,5).
PRINT "NEWER ESTIMATE: " + GETITERATEBALLX(ALTITUDE,ALTITUDE, CALCHORV, SHIP:VERTICALSPEED, Cd) AT (0,4).
SET YMAXNEW TO (NEWVt^2 / (2 * g)) * ln ((SHIP:VERTICALSPEED^2 + NEWVt^2)/NEWVt^2).
PRINT "NEW YMAX: " + (YMAXNEW + ALTITUDE) AT (0,10).

SET STARTINGALT TO ALTITUDE.
SET STARTINGSPOT to SHIP:GEOPOSITION.
SET STARTTIME TO TIME:SECONDS.
SET STARTHORV TO CALCHORV.
SET STARTVERV TO SHIP:VERTICALSPEED.
SET MAXALT TO 0.
UNTIL (ALTITUDE < STARTINGALT)
{
	PRINTDATA().
	PRINT "G: " + g AT (0,30).
	RCS OFF.
	IF (MAXALT < ALTITUDE)
	{
		SET MAXALT TO ALTITUDE.
	}
}
BRAKES ON.
RCS ON.
SET REALDISTANCE TO STARTINGSPOT:DISTANCE.
PRINT "REAL DISTANCE: " + REALDISTANCE AT (0,6).
SET REALTIME TO (TIME:SECONDS - STARTTIME).
PRINT "REAL TIME: " + REALTIME AT (0,7).
PRINT "REAL MAXY: " + MAXALT AT (0,8).
SET TARGETALT TO 100.
LOCK STEERING TO UP.
LOCK THROTTLE TO 1.0.
wait 5.
LOCK STEERING TO RETROGRADE.
UNTIL (XNEW > REALDISTANCE)
{
	PRINT "CALCULCATING NEW Cd..." + Cd AT (0,15).
	PRINT "NEWX: " + XNEW AT (0,16).
	
	SET Cd TO Cd - 0.0001.
	IF (Cd < 0.0002) { BREAK. }.
	SET PEAKG TO body:mu / (MAXALT + body:radius)^2.

	SET AVGG TO (PEAKG+NEWG)/2.
	SET NEWVt TO SQRT((2*SHIP:MASS*g)/(Cd*GETDENSITY((ALTITUDE+(ALTITUDE+MAXALT))/2))).
	SET FALLTIMENEW TO ((STARTVERV)/AVGG)*2.
	SET XNEW TO ((NEWVt*NEWVt)/AVGG)*(LN(((NEWVt*NEWVt)+AVGG*STARTHORV*FALLTIMENEW)/(NEWVt*NEWVt))).
	IF (SHIP:VERTICALSPEED < 1.0)
	{
		LOCK TWR TO ((SHIP:MAXTHRUST*1000)/((SHIP:MASS*1000)*g)).
		SET THROTTLE TO (1.0/TWR) - SHIP:VERTICALSPEED.
	}
	IF (SHIP:GROUNDSPEED < 5.0)
	{
		LOCK STEERING TO HEADING(90,90).
	}
}

UNTIL (FALSE)
{
	PRINTDATA().
	IF (SHIP:VERTICALSPEED < -1.0)
	{
		LOCK TWR TO ((SHIP:MAXTHRUST*1000)/((SHIP:MASS*1000)*g)).
		LOCK THROTTLE TO (1.0/TWR) - (SHIP:VERTICALSPEED+(ALT:RADAR/10)).
	}
	IF (SHIP:GROUNDSPEED < 5.0)
	{
		LOCK STEERING TO HEADING(90,90).
	}
}
